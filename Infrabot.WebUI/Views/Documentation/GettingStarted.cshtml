@{
    ViewData["Title"] = "Getting started";
}

<article class="blog-post">
    <h2 class="display-5 link-body-emphasis mb-1 mt-3">Getting started</h2>
    <p class="blog-post-meta">February 4, 2025 by <a href="https://linkedin.com/in/akshinmustafayev" target="_blank">Akshin Mustafayev</a></p>
    <hr>

    <h3>Installation</h3>
    <p>Download the latest installation file from <a href="https://github.com/infrabot-io/infrabot/releases" target="_blank">here</a>, then follow the installation process to set up infrabot on your system.</p>
    <p>The setup wizard will guide you through the installation process. By default, the installer places the binary files in the <code>C:\Program Files\infrabot.io</code> folder. Additionally, during installation, a Windows service named <code>infrabot.io</code> will be created.</p>
    <p>The service will run using <code>Local System</code> credentials by default. However, you can configure it to use a different account if needed (refer to the <b>Service Account</b> section for details).</p>

    <br>
    <h3>Create Telegram Bot</h3>
    <p>In order to get started with infrabot, you need to create a Telegram bot and acquire its API token from <code>@@BotFather</code>.</p>
    <p>Here are some extra links that may prove helpful to you:</p>
    <ul>
        <li><a href="https://core.telegram.org/bots" target="_blank" rel="noopener"> telegram.org documentation</a></li>
        <li><a href="https://telegra.ph/Awesome-Telegram-Bot-11-11" target="_blank" rel="noopener">telegra.ph article</a></li>
        <li><a href="https://medium.com/shibinco/create-a-telegram-bot-using-botfather-and-get-the-api-token-900ba00e0f39" target="_blank" rel="noopener">medium.com article</a></li>
    </ul>

    <h4>Step 1</h4>
    <p>Find telegram bot named <code>@@BotFather</code> - it will assist you in creating and managing your bot.</p>
    <img class="img-fluid" src="../img/documentation/gettingstarted/1.png">

    <br><br>
    <h4>Step 2</h4>
    <p>Type <code>/help</code> in the chat with <code>@@BotFather</code> and you'll see a list of all available commands it can execute.</p>
    <img class="img-fluid" src="../img/documentation/gettingstarted/2.png">

    <br>
    <h4>Step 3</h4>
    <p>To create a new bot, type <code>/newbot</code> or click on it. Follow the provided instructions and assign a unique name to your bot.</p>
    <img class="img-fluid" src="../img/documentation/gettingstarted/3.png">

    <br>
    <h4>Step 4</h4>
    <p>Congratulations! You’ve successfully created your Telegram bot. A new API token has been generated — make sure to save it for future use.</p>

    <h4>Step 5</h4>
    <p>Put Token into <code>Telegram bot Token</code> field on <a asp-controller="Configuration" asp-action="Index">Configuration</a> page.</p>
    <img class="img-fluid" src="../img/documentation/gettingstarted/4.png">
    <br><br>
    
    <h4>Step 6</h4>
    <p>Configure environments on <a asp-controller="Configuration" asp-action="Index">Configuration</a> page for your scripts.</p>
    <img class="img-fluid" src="../img/documentation/gettingstarted/5.png">
    <br>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Parameter</th>
                <th scope="col">Type</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td scope="row">PowerShell Path</td>
                <td>String</td>
                <td>This parameter specifies the absolute path to the PowerShell executable. By default, it points to "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe". To use PowerShell 7, you can install it separately and update this path to the new executable. Works both for Linux and Windows operating systems.</td>
            </tr>
            <tr>
                <td scope="row">PowerShell Arguments</td>
                <td>String</td>
                <td>This parameter sets the arguments passed to powershell.exe during each execution. By default, it uses "-ExecutionPolicy Unrestricted -NoProfile". 
                    <br>
                    Note: Using -ExecutionPolicy Unrestricted is not recommended for production environments due to security risks. Learn more in the official documentation <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.5" target="_blank">here</a>.
                </td>
            </tr>
            <tr>
                <td scope="row">Shell Path</td>
                <td>String</td>
                <td>
                    This parameter specifies the shell. By default it is "/bin/bash". 
                    <br><br>
                    Examples:
                    <ul>
                        <li>/bin/csh</li>
                        <li>/bin/ksh</li>
                        <li>/bin/zsh</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td scope="row">Shell Arguments</td>
                <td>String</td>
                <td>This parameter sets the arguments passed to shell during each execution.</td>
            </tr>
            <tr>
                <td scope="row">Python Path</td>
                <td>String</td>
                <td>This parameter defines path to python executable. Works both for Linux and Windows operating systems.</td>
            </tr>
            <tr>
                <td scope="row">Python Arguments</td>
                <td>String</td>
                <td>This parameter sets the arguments passed to python during each execution.</td>
            </tr>
        </tbody>
    </table>
    <br>
    <p>The <b>PowerShell Path</b>, <b>Shell Path</b>, and <b>Python Path</b> fields support environment variables. You can define paths using placeholders, for example: <code>{ProgramFiles}\python\python.exe</code></p>
    <p>List of possible variables: </p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td scope="row">{ApplicationData}</td>
                <td>The directory that serves as a common repository for application-specific data for the current roaming user. A roaming user works on more than one computer on a network. A roaming user's profile is kept on a server on the network and is loaded onto a system when the user logs on.</td>
            </tr>
            <tr>
                <td scope="row">{CommonApplicationData}</td>
                <td>The directory that serves as a common repository for application-specific data that is used by all users.</td>
            </tr>
            <tr>
                <td scope="row">{CommonDesktopDirectory}</td>
                <td>The file system directory that contains files and folders that appear on the desktop for all users.</td>
            </tr>
            <tr>
                <td scope="row">{DesktopDirectory}</td>
                <td>The directory used to physically store file objects on the desktop.</td>
            </tr>
            <tr>
                <td scope="row">{LocalApplicationData}</td>
                <td>The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.</td>
            </tr>
            <tr>
                <td scope="row">{MyDocuments}</td>
                <td>The My Documents folder.</td>
            </tr>
            <tr>
                <td scope="row">{ProgramFiles}</td>
                <td>The program files directory.</td>
            </tr>
            <tr>
                <td scope="row">{ProgramFilesX86}</td>
                <td>The x86 Program Files folder.</td>
            </tr>
            <tr>
                <td scope="row">{Startup}</td>
                <td>The directory that corresponds to the user's Startup program group. The system starts these programs whenever a user logs on or starts Windows.</td>
            </tr>
            <tr>
                <td scope="row">{System}</td>
                <td>The System directory.</td>
            </tr>
            <tr>
                <td scope="row">{SystemX86}</td>
                <td>The Windows System folder.</td>
            </tr>
            <tr>
                <td scope="row">{UserProfile}</td>
                <td>The user's profile folder.</td>
            </tr>
            <tr>
                <td scope="row">{Windows}</td>
                <td>The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables.</td>
            </tr>
            <tr>
                <td scope="row">{MachineName}</td>
                <td>The NetBIOS name of this local computer.</td>
            </tr>
            <tr>
                <td scope="row">{ProcessPath}</td>
                <td>Returns the path of the executable that started the currently executing process.</td>
            </tr>
            <tr>
                <td scope="row">{CurrentDirectory}</td>
                <td>Gets the fully qualified path of the current working directory.</td>
            </tr>
            <tr>
                <td scope="row">{UserName}</td>
                <td>Gets the user name of the person who is associated with the current thread.</td>
            </tr>
            <tr>
                <td scope="row">{UserDomainName}</td>
                <td>Gets the network domain name associated with the current user.</td>
            </tr>
        </tbody>
    </table>

    <br>
    <h4>Step 7</h4>
    <p>Start the Telegram Service from the services list. Ensure the token is valid; otherwise, the service won't be able to launch properly. After modifying the configuration, the Telegram Service must be restarted for the changes to take effect.</p>

    <br>
    <h4>Step 8</h4>
    <p>You can deploy plugins either through the Web UI or by manually uploading .plug files to the <code>/plugins</code> folder. Once the plugin appears in the list, send the <code>/showmyid</code> command to the bot to retrieve your Telegram ID. After obtaining your ID, add yourself under Telegram Users, then assign permission to execute the command via the Permission Assignment page. Permissions can be granted either directly to a user or through one or more groups. Infrabot will ignore default commands if the user's Telegram ID is not registered under Telegram Users.</p>

    <br>
    <h3>Service Account</h3>
    <p>By default, the Infrabot service runs under the <code>Local System</code> account. However, you can change it to another user account or an <code>Active Directory Managed Service Account</code> if required.</p>
    <p>Please refer to <a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/group-managed-service-accounts/group-managed-service-accounts/group-managed-service-accounts-overview" alt="gMSA" target="_blank">this</a> article for more information</p>

    <br><br><br><br>
</article>
