// <auto-generated />
using System;
using Infrabot.Common.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrabot.WebUI.Migrations
{
    [DbContext(typeof(InfrabotContext))]
    [Migration("20250406173030_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("GroupPermissionAssignment", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionAssignmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsId", "PermissionAssignmentId");

                    b.HasIndex("PermissionAssignmentId");

                    b.ToTable("PermissionAssignmentGroups", (string)null);
                });

            modelBuilder.Entity("Infrabot.Common.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LogAction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogItem")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Infrabot.Common.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ADDomainName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ADLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("ADPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("ADServer")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsADEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PasswordPolicyContainLowerCase")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PasswordPolicyContainNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PasswordPolicyContainSpecialCharacter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PasswordPolicyContainUpperCase")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PasswordPolicyMinLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramBotToken")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TelegramEnableEmergency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TelegramEnableShowMyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramLinuxShellArguments")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramLinuxShellPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramPowerShellArguments")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramPowerShellPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramPythonArguments")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramPythonPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("TelegramResultMaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ADDomainName = "SYsbRFILmcFM0MIyxaZwog==",
                            ADLogin = "2H3bbx3JbmWNiC/x4cIAnw==",
                            ADPassword = "YE0BX7w+ABITvhhnLfljbQ==",
                            ADServer = "SYsbRFILmcFM0MIyxaZwog==",
                            IsADEnabled = false,
                            PasswordPolicyContainLowerCase = false,
                            PasswordPolicyContainNumber = false,
                            PasswordPolicyContainSpecialCharacter = false,
                            PasswordPolicyContainUpperCase = false,
                            PasswordPolicyMinLength = 6,
                            TelegramBotToken = "h4J0LugxQvEdJyy4mwhdJw==",
                            TelegramEnableEmergency = true,
                            TelegramEnableShowMyId = true,
                            TelegramLinuxShellArguments = "",
                            TelegramLinuxShellPath = "/bin/bash",
                            TelegramPowerShellArguments = "-ExecutionPolicy Unrestricted -NoProfile",
                            TelegramPowerShellPath = "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
                            TelegramPythonArguments = "",
                            TelegramPythonPath = "/usr/bin/python",
                            TelegramResultMaxLength = 12000,
                            UpdatedDate = new DateTime(2025, 4, 6, 21, 30, 29, 849, DateTimeKind.Local).AddTicks(8970)
                        });
                });

            modelBuilder.Entity("Infrabot.Common.Models.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("Infrabot.Common.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrabot.Common.Models.GroupPlugin", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PluginId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "PluginId");

                    b.HasIndex("PluginId");

                    b.ToTable("GroupPlugins");
                });

            modelBuilder.Entity("Infrabot.Common.Models.HealthCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HealthChecks");
                });

            modelBuilder.Entity("Infrabot.Common.Models.PermissionAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PermissionAssignments");
                });

            modelBuilder.Entity("Infrabot.Common.Models.Plugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Plugins");
                });

            modelBuilder.Entity("Infrabot.Common.Models.TelegramMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramUserUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TelegramMessages");
                });

            modelBuilder.Entity("Infrabot.Common.Models.TelegramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<int>("TelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TelegramUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 4, 6, 21, 30, 29, 847, DateTimeKind.Local).AddTicks(6700),
                            Name = "Akshin",
                            Surname = "Mustafayev",
                            TelegramId = 816058261,
                            UpdatedDate = new DateTime(2025, 4, 6, 21, 30, 29, 848, DateTimeKind.Local).AddTicks(8160)
                        });
                });

            modelBuilder.Entity("Infrabot.Common.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsADIntegrated")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Infrabot.Common.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "TelegramUserId");

                    b.HasIndex("TelegramUserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionAssignmentPlugin", b =>
                {
                    b.Property<int>("PermissionAssignmentsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PluginsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PermissionAssignmentsId", "PluginsId");

                    b.HasIndex("PluginsId");

                    b.ToTable("PermissionAssignmentPlugins", (string)null);
                });

            modelBuilder.Entity("PermissionAssignmentTelegramUser", b =>
                {
                    b.Property<int>("PermissionAssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TelegramUsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PermissionAssignmentId", "TelegramUsersId");

                    b.HasIndex("TelegramUsersId");

                    b.ToTable("PermissionAssignmentTelegramUsers", (string)null);
                });

            modelBuilder.Entity("GroupPermissionAssignment", b =>
                {
                    b.HasOne("Infrabot.Common.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrabot.Common.Models.PermissionAssignment", null)
                        .WithMany()
                        .HasForeignKey("PermissionAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrabot.Common.Models.GroupPlugin", b =>
                {
                    b.HasOne("Infrabot.Common.Models.Group", "Group")
                        .WithMany("GroupPlugins")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrabot.Common.Models.Plugin", "Plugin")
                        .WithMany("GroupPlugins")
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("Infrabot.Common.Models.UserGroup", b =>
                {
                    b.HasOne("Infrabot.Common.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrabot.Common.Models.TelegramUser", "TelegramUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrabot.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrabot.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrabot.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrabot.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionAssignmentPlugin", b =>
                {
                    b.HasOne("Infrabot.Common.Models.PermissionAssignment", null)
                        .WithMany()
                        .HasForeignKey("PermissionAssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrabot.Common.Models.Plugin", null)
                        .WithMany()
                        .HasForeignKey("PluginsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionAssignmentTelegramUser", b =>
                {
                    b.HasOne("Infrabot.Common.Models.PermissionAssignment", null)
                        .WithMany()
                        .HasForeignKey("PermissionAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrabot.Common.Models.TelegramUser", null)
                        .WithMany()
                        .HasForeignKey("TelegramUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrabot.Common.Models.Group", b =>
                {
                    b.Navigation("GroupPlugins");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Infrabot.Common.Models.Plugin", b =>
                {
                    b.Navigation("GroupPlugins");
                });

            modelBuilder.Entity("Infrabot.Common.Models.TelegramUser", b =>
                {
                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
